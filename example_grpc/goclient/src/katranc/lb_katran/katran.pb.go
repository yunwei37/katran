// Copyright (C) 2018-present, Facebook, Inc.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; version 2 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License along
// with this program; if not, write to the Free Software Foundation, Inc.,
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: katran.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Action int32

const (
	Action_ADD Action = 0
	Action_DEL Action = 1
)

// Enum value maps for Action.
var (
	Action_name = map[int32]string{
		0: "ADD",
		1: "DEL",
	}
	Action_value = map[string]int32{
		"ADD": 0,
		"DEL": 1,
	}
)

func (x Action) Enum() *Action {
	p := new(Action)
	*p = x
	return p
}

func (x Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Action) Descriptor() protoreflect.EnumDescriptor {
	return file_katran_proto_enumTypes[0].Descriptor()
}

func (Action) Type() protoreflect.EnumType {
	return &file_katran_proto_enumTypes[0]
}

func (x Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Action.Descriptor instead.
func (Action) EnumDescriptor() ([]byte, []int) {
	return file_katran_proto_rawDescGZIP(), []int{0}
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_katran_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_katran_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_katran_proto_rawDescGZIP(), []int{0}
}

type Bool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *Bool) Reset() {
	*x = Bool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_katran_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bool) ProtoMessage() {}

func (x *Bool) ProtoReflect() protoreflect.Message {
	mi := &file_katran_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bool.ProtoReflect.Descriptor instead.
func (*Bool) Descriptor() ([]byte, []int) {
	return file_katran_proto_rawDescGZIP(), []int{1}
}

func (x *Bool) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type Vip struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address  string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Port     int32  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	Protocol int32  `protobuf:"varint,3,opt,name=protocol,proto3" json:"protocol,omitempty"`
}

func (x *Vip) Reset() {
	*x = Vip{}
	if protoimpl.UnsafeEnabled {
		mi := &file_katran_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vip) ProtoMessage() {}

func (x *Vip) ProtoReflect() protoreflect.Message {
	mi := &file_katran_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vip.ProtoReflect.Descriptor instead.
func (*Vip) Descriptor() ([]byte, []int) {
	return file_katran_proto_rawDescGZIP(), []int{2}
}

func (x *Vip) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Vip) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Vip) GetProtocol() int32 {
	if x != nil {
		return x.Protocol
	}
	return 0
}

type VipMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vip   *Vip  `protobuf:"bytes,1,opt,name=vip,proto3" json:"vip,omitempty"`
	Flags int64 `protobuf:"varint,2,opt,name=flags,proto3" json:"flags,omitempty"`
	// setFlag controls if we setting this flags or removing it from the VIP
	SetFlag bool `protobuf:"varint,3,opt,name=setFlag,proto3" json:"setFlag,omitempty"`
}

func (x *VipMeta) Reset() {
	*x = VipMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_katran_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipMeta) ProtoMessage() {}

func (x *VipMeta) ProtoReflect() protoreflect.Message {
	mi := &file_katran_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipMeta.ProtoReflect.Descriptor instead.
func (*VipMeta) Descriptor() ([]byte, []int) {
	return file_katran_proto_rawDescGZIP(), []int{3}
}

func (x *VipMeta) GetVip() *Vip {
	if x != nil {
		return x.Vip
	}
	return nil
}

func (x *VipMeta) GetFlags() int64 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *VipMeta) GetSetFlag() bool {
	if x != nil {
		return x.SetFlag
	}
	return false
}

type RealMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Flags   int32  `protobuf:"varint,2,opt,name=flags,proto3" json:"flags,omitempty"`
	// setFlag controls if we setting this flags or removing it from the Real
	SetFlag bool `protobuf:"varint,3,opt,name=setFlag,proto3" json:"setFlag,omitempty"`
}

func (x *RealMeta) Reset() {
	*x = RealMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_katran_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RealMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealMeta) ProtoMessage() {}

func (x *RealMeta) ProtoReflect() protoreflect.Message {
	mi := &file_katran_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealMeta.ProtoReflect.Descriptor instead.
func (*RealMeta) Descriptor() ([]byte, []int) {
	return file_katran_proto_rawDescGZIP(), []int{4}
}

func (x *RealMeta) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *RealMeta) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *RealMeta) GetSetFlag() bool {
	if x != nil {
		return x.SetFlag
	}
	return false
}

type Real struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Weight  int32  `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty"`
	Flags   int32  `protobuf:"varint,3,opt,name=flags,proto3" json:"flags,omitempty"`
}

func (x *Real) Reset() {
	*x = Real{}
	if protoimpl.UnsafeEnabled {
		mi := &file_katran_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Real) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Real) ProtoMessage() {}

func (x *Real) ProtoReflect() protoreflect.Message {
	mi := &file_katran_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Real.ProtoReflect.Descriptor instead.
func (*Real) Descriptor() ([]byte, []int) {
	return file_katran_proto_rawDescGZIP(), []int{5}
}

func (x *Real) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Real) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *Real) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

type QuicReal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Id      int32  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *QuicReal) Reset() {
	*x = QuicReal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_katran_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuicReal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuicReal) ProtoMessage() {}

func (x *QuicReal) ProtoReflect() protoreflect.Message {
	mi := &file_katran_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuicReal.ProtoReflect.Descriptor instead.
func (*QuicReal) Descriptor() ([]byte, []int) {
	return file_katran_proto_rawDescGZIP(), []int{6}
}

func (x *QuicReal) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *QuicReal) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type Mac struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mac string `protobuf:"bytes,1,opt,name=mac,proto3" json:"mac,omitempty"`
}

func (x *Mac) Reset() {
	*x = Mac{}
	if protoimpl.UnsafeEnabled {
		mi := &file_katran_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Mac) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mac) ProtoMessage() {}

func (x *Mac) ProtoReflect() protoreflect.Message {
	mi := &file_katran_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mac.ProtoReflect.Descriptor instead.
func (*Mac) Descriptor() ([]byte, []int) {
	return file_katran_proto_rawDescGZIP(), []int{7}
}

func (x *Mac) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

type Stats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	V1 uint64 `protobuf:"varint,1,opt,name=v1,proto3" json:"v1,omitempty"`
	V2 uint64 `protobuf:"varint,2,opt,name=v2,proto3" json:"v2,omitempty"`
}

func (x *Stats) Reset() {
	*x = Stats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_katran_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stats) ProtoMessage() {}

func (x *Stats) ProtoReflect() protoreflect.Message {
	mi := &file_katran_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stats.ProtoReflect.Descriptor instead.
func (*Stats) Descriptor() ([]byte, []int) {
	return file_katran_proto_rawDescGZIP(), []int{8}
}

func (x *Stats) GetV1() uint64 {
	if x != nil {
		return x.V1
	}
	return 0
}

func (x *Stats) GetV2() uint64 {
	if x != nil {
		return x.V2
	}
	return 0
}

type Healthcheck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Somark  uint32 `protobuf:"varint,1,opt,name=somark,proto3" json:"somark,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *Healthcheck) Reset() {
	*x = Healthcheck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_katran_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Healthcheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Healthcheck) ProtoMessage() {}

func (x *Healthcheck) ProtoReflect() protoreflect.Message {
	mi := &file_katran_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Healthcheck.ProtoReflect.Descriptor instead.
func (*Healthcheck) Descriptor() ([]byte, []int) {
	return file_katran_proto_rawDescGZIP(), []int{9}
}

func (x *Healthcheck) GetSomark() uint32 {
	if x != nil {
		return x.Somark
	}
	return 0
}

func (x *Healthcheck) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type HcMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Healthchecks map[int32]string `protobuf:"bytes,1,rep,name=healthchecks,proto3" json:"healthchecks,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *HcMap) Reset() {
	*x = HcMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_katran_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HcMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HcMap) ProtoMessage() {}

func (x *HcMap) ProtoReflect() protoreflect.Message {
	mi := &file_katran_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HcMap.ProtoReflect.Descriptor instead.
func (*HcMap) Descriptor() ([]byte, []int) {
	return file_katran_proto_rawDescGZIP(), []int{10}
}

func (x *HcMap) GetHealthchecks() map[int32]string {
	if x != nil {
		return x.Healthchecks
	}
	return nil
}

type Reals struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reals []*Real `protobuf:"bytes,1,rep,name=reals,proto3" json:"reals,omitempty"`
}

func (x *Reals) Reset() {
	*x = Reals{}
	if protoimpl.UnsafeEnabled {
		mi := &file_katran_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reals) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reals) ProtoMessage() {}

func (x *Reals) ProtoReflect() protoreflect.Message {
	mi := &file_katran_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reals.ProtoReflect.Descriptor instead.
func (*Reals) Descriptor() ([]byte, []int) {
	return file_katran_proto_rawDescGZIP(), []int{11}
}

func (x *Reals) GetReals() []*Real {
	if x != nil {
		return x.Reals
	}
	return nil
}

type Vips struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vips []*Vip `protobuf:"bytes,1,rep,name=vips,proto3" json:"vips,omitempty"`
}

func (x *Vips) Reset() {
	*x = Vips{}
	if protoimpl.UnsafeEnabled {
		mi := &file_katran_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vips) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vips) ProtoMessage() {}

func (x *Vips) ProtoReflect() protoreflect.Message {
	mi := &file_katran_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vips.ProtoReflect.Descriptor instead.
func (*Vips) Descriptor() ([]byte, []int) {
	return file_katran_proto_rawDescGZIP(), []int{12}
}

func (x *Vips) GetVips() []*Vip {
	if x != nil {
		return x.Vips
	}
	return nil
}

type QuicReals struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Qreals []*QuicReal `protobuf:"bytes,1,rep,name=qreals,proto3" json:"qreals,omitempty"`
}

func (x *QuicReals) Reset() {
	*x = QuicReals{}
	if protoimpl.UnsafeEnabled {
		mi := &file_katran_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuicReals) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuicReals) ProtoMessage() {}

func (x *QuicReals) ProtoReflect() protoreflect.Message {
	mi := &file_katran_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuicReals.ProtoReflect.Descriptor instead.
func (*QuicReals) Descriptor() ([]byte, []int) {
	return file_katran_proto_rawDescGZIP(), []int{13}
}

func (x *QuicReals) GetQreals() []*QuicReal {
	if x != nil {
		return x.Qreals
	}
	return nil
}

type ModifiedRealsForVip struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action Action `protobuf:"varint,1,opt,name=action,proto3,enum=lb.katran.Action" json:"action,omitempty"`
	Real   *Reals `protobuf:"bytes,2,opt,name=real,proto3" json:"real,omitempty"`
	Vip    *Vip   `protobuf:"bytes,3,opt,name=vip,proto3" json:"vip,omitempty"`
}

func (x *ModifiedRealsForVip) Reset() {
	*x = ModifiedRealsForVip{}
	if protoimpl.UnsafeEnabled {
		mi := &file_katran_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifiedRealsForVip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifiedRealsForVip) ProtoMessage() {}

func (x *ModifiedRealsForVip) ProtoReflect() protoreflect.Message {
	mi := &file_katran_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifiedRealsForVip.ProtoReflect.Descriptor instead.
func (*ModifiedRealsForVip) Descriptor() ([]byte, []int) {
	return file_katran_proto_rawDescGZIP(), []int{14}
}

func (x *ModifiedRealsForVip) GetAction() Action {
	if x != nil {
		return x.Action
	}
	return Action_ADD
}

func (x *ModifiedRealsForVip) GetReal() *Reals {
	if x != nil {
		return x.Real
	}
	return nil
}

func (x *ModifiedRealsForVip) GetVip() *Vip {
	if x != nil {
		return x.Vip
	}
	return nil
}

type ModifiedQuicReals struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action Action     `protobuf:"varint,1,opt,name=action,proto3,enum=lb.katran.Action" json:"action,omitempty"`
	Reals  *QuicReals `protobuf:"bytes,2,opt,name=reals,proto3" json:"reals,omitempty"`
}

func (x *ModifiedQuicReals) Reset() {
	*x = ModifiedQuicReals{}
	if protoimpl.UnsafeEnabled {
		mi := &file_katran_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifiedQuicReals) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifiedQuicReals) ProtoMessage() {}

func (x *ModifiedQuicReals) ProtoReflect() protoreflect.Message {
	mi := &file_katran_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifiedQuicReals.ProtoReflect.Descriptor instead.
func (*ModifiedQuicReals) Descriptor() ([]byte, []int) {
	return file_katran_proto_rawDescGZIP(), []int{15}
}

func (x *ModifiedQuicReals) GetAction() Action {
	if x != nil {
		return x.Action
	}
	return Action_ADD
}

func (x *ModifiedQuicReals) GetReals() *QuicReals {
	if x != nil {
		return x.Reals
	}
	return nil
}

type RealForVip struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Real *Real `protobuf:"bytes,1,opt,name=real,proto3" json:"real,omitempty"`
	Vip  *Vip  `protobuf:"bytes,2,opt,name=vip,proto3" json:"vip,omitempty"`
}

func (x *RealForVip) Reset() {
	*x = RealForVip{}
	if protoimpl.UnsafeEnabled {
		mi := &file_katran_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RealForVip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealForVip) ProtoMessage() {}

func (x *RealForVip) ProtoReflect() protoreflect.Message {
	mi := &file_katran_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealForVip.ProtoReflect.Descriptor instead.
func (*RealForVip) Descriptor() ([]byte, []int) {
	return file_katran_proto_rawDescGZIP(), []int{16}
}

func (x *RealForVip) GetReal() *Real {
	if x != nil {
		return x.Real
	}
	return nil
}

func (x *RealForVip) GetVip() *Vip {
	if x != nil {
		return x.Vip
	}
	return nil
}

type Flags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flags uint64 `protobuf:"varint,1,opt,name=flags,proto3" json:"flags,omitempty"`
}

func (x *Flags) Reset() {
	*x = Flags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_katran_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Flags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Flags) ProtoMessage() {}

func (x *Flags) ProtoReflect() protoreflect.Message {
	mi := &file_katran_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Flags.ProtoReflect.Descriptor instead.
func (*Flags) Descriptor() ([]byte, []int) {
	return file_katran_proto_rawDescGZIP(), []int{17}
}

func (x *Flags) GetFlags() uint64 {
	if x != nil {
		return x.Flags
	}
	return 0
}

type Somark struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Somark uint32 `protobuf:"varint,1,opt,name=somark,proto3" json:"somark,omitempty"`
}

func (x *Somark) Reset() {
	*x = Somark{}
	if protoimpl.UnsafeEnabled {
		mi := &file_katran_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Somark) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Somark) ProtoMessage() {}

func (x *Somark) ProtoReflect() protoreflect.Message {
	mi := &file_katran_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Somark.ProtoReflect.Descriptor instead.
func (*Somark) Descriptor() ([]byte, []int) {
	return file_katran_proto_rawDescGZIP(), []int{18}
}

func (x *Somark) GetSomark() uint32 {
	if x != nil {
		return x.Somark
	}
	return 0
}

var File_katran_proto protoreflect.FileDescriptor

var file_katran_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x6b, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09,
	0x6c, 0x62, 0x2e, 0x6b, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x20, 0x0a, 0x04, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x22, 0x4f, 0x0a, 0x03, 0x56, 0x69, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x22, 0x5b, 0x0a, 0x07, 0x56, 0x69, 0x70, 0x4d, 0x65, 0x74, 0x61,
	0x12, 0x20, 0x0a, 0x03, 0x76, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x6c, 0x62, 0x2e, 0x6b, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x2e, 0x56, 0x69, 0x70, 0x52, 0x03, 0x76,
	0x69, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x74, 0x46,
	0x6c, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x65, 0x74, 0x46, 0x6c,
	0x61, 0x67, 0x22, 0x54, 0x0a, 0x08, 0x52, 0x65, 0x61, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x4e, 0x0a, 0x04, 0x52, 0x65, 0x61, 0x6c,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x22, 0x34, 0x0a, 0x08, 0x51, 0x75, 0x69, 0x63,
	0x52, 0x65, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x17,
	0x0a, 0x03, 0x4d, 0x61, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x22, 0x27, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x12, 0x0e, 0x0a, 0x02, 0x76, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x76, 0x31,
	0x12, 0x0e, 0x0a, 0x02, 0x76, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x76, 0x32,
	0x22, 0x3f, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x6f, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x73, 0x6f, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x22, 0x90, 0x01, 0x0a, 0x05, 0x68, 0x63, 0x4d, 0x61, 0x70, 0x12, 0x46, 0x0a, 0x0c, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x6c, 0x62, 0x2e, 0x6b, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x2e, 0x68, 0x63,
	0x4d, 0x61, 0x70, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x73, 0x1a, 0x3f, 0x0a, 0x11, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x2e, 0x0a, 0x05, 0x52, 0x65, 0x61, 0x6c, 0x73, 0x12, 0x25, 0x0a,
	0x05, 0x72, 0x65, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6c,
	0x62, 0x2e, 0x6b, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x52, 0x05, 0x72,
	0x65, 0x61, 0x6c, 0x73, 0x22, 0x2a, 0x0a, 0x04, 0x56, 0x69, 0x70, 0x73, 0x12, 0x22, 0x0a, 0x04,
	0x76, 0x69, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6c, 0x62, 0x2e,
	0x6b, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x2e, 0x56, 0x69, 0x70, 0x52, 0x04, 0x76, 0x69, 0x70, 0x73,
	0x22, 0x38, 0x0a, 0x09, 0x51, 0x75, 0x69, 0x63, 0x52, 0x65, 0x61, 0x6c, 0x73, 0x12, 0x2b, 0x0a,
	0x06, 0x71, 0x72, 0x65, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x6c, 0x62, 0x2e, 0x6b, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x2e, 0x51, 0x75, 0x69, 0x63, 0x52, 0x65,
	0x61, 0x6c, 0x52, 0x06, 0x71, 0x72, 0x65, 0x61, 0x6c, 0x73, 0x22, 0x88, 0x01, 0x0a, 0x13, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x52, 0x65, 0x61, 0x6c, 0x73, 0x46, 0x6f, 0x72, 0x56,
	0x69, 0x70, 0x12, 0x29, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x11, 0x2e, 0x6c, 0x62, 0x2e, 0x6b, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a,
	0x04, 0x72, 0x65, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6c, 0x62,
	0x2e, 0x6b, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x73, 0x52, 0x04, 0x72,
	0x65, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x03, 0x76, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x6c, 0x62, 0x2e, 0x6b, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x2e, 0x56, 0x69, 0x70,
	0x52, 0x03, 0x76, 0x69, 0x70, 0x22, 0x6a, 0x0a, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x51, 0x75, 0x69, 0x63, 0x52, 0x65, 0x61, 0x6c, 0x73, 0x12, 0x29, 0x0a, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x6c, 0x62, 0x2e,
	0x6b, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x05, 0x72, 0x65, 0x61, 0x6c, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6c, 0x62, 0x2e, 0x6b, 0x61, 0x74, 0x72, 0x61, 0x6e,
	0x2e, 0x51, 0x75, 0x69, 0x63, 0x52, 0x65, 0x61, 0x6c, 0x73, 0x52, 0x05, 0x72, 0x65, 0x61, 0x6c,
	0x73, 0x22, 0x53, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x6c, 0x46, 0x6f, 0x72, 0x56, 0x69, 0x70, 0x12,
	0x23, 0x0a, 0x04, 0x72, 0x65, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x6c, 0x62, 0x2e, 0x6b, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x52, 0x04,
	0x72, 0x65, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x03, 0x76, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x6c, 0x62, 0x2e, 0x6b, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x2e, 0x56, 0x69,
	0x70, 0x52, 0x03, 0x76, 0x69, 0x70, 0x22, 0x1d, 0x0a, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x66, 0x6c, 0x61, 0x67, 0x73, 0x22, 0x20, 0x0a, 0x06, 0x53, 0x6f, 0x6d, 0x61, 0x72, 0x6b, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x6f, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x73, 0x6f, 0x6d, 0x61, 0x72, 0x6b, 0x2a, 0x1a, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x44, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x45,
	0x4c, 0x10, 0x01, 0x32, 0xfc, 0x09, 0x0a, 0x0d, 0x4b, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d,
	0x61, 0x63, 0x12, 0x0e, 0x2e, 0x6c, 0x62, 0x2e, 0x6b, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x2e, 0x4d,
	0x61, 0x63, 0x1a, 0x0f, 0x2e, 0x6c, 0x62, 0x2e, 0x6b, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x12, 0x2a, 0x0a, 0x06, 0x67, 0x65, 0x74, 0x4d, 0x61, 0x63, 0x12, 0x10, 0x2e,
	0x6c, 0x62, 0x2e, 0x6b, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x0e, 0x2e, 0x6c, 0x62, 0x2e, 0x6b, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x2e, 0x4d, 0x61, 0x63, 0x12,
	0x2d, 0x0a, 0x06, 0x61, 0x64, 0x64, 0x56, 0x69, 0x70, 0x12, 0x12, 0x2e, 0x6c, 0x62, 0x2e, 0x6b,
	0x61, 0x74, 0x72, 0x61, 0x6e, 0x2e, 0x56, 0x69, 0x70, 0x4d, 0x65, 0x74, 0x61, 0x1a, 0x0f, 0x2e,
	0x6c, 0x62, 0x2e, 0x6b, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x29,
	0x0a, 0x06, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x70, 0x12, 0x0e, 0x2e, 0x6c, 0x62, 0x2e, 0x6b, 0x61,
	0x74, 0x72, 0x61, 0x6e, 0x2e, 0x56, 0x69, 0x70, 0x1a, 0x0f, 0x2e, 0x6c, 0x62, 0x2e, 0x6b, 0x61,
	0x74, 0x72, 0x61, 0x6e, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x2f, 0x0a, 0x0a, 0x67, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x56, 0x69, 0x70, 0x73, 0x12, 0x10, 0x2e, 0x6c, 0x62, 0x2e, 0x6b, 0x61, 0x74,
	0x72, 0x61, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0f, 0x2e, 0x6c, 0x62, 0x2e, 0x6b,
	0x61, 0x74, 0x72, 0x61, 0x6e, 0x2e, 0x56, 0x69, 0x70, 0x73, 0x12, 0x30, 0x0a, 0x09, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x79, 0x56, 0x69, 0x70, 0x12, 0x12, 0x2e, 0x6c, 0x62, 0x2e, 0x6b, 0x61, 0x74,
	0x72, 0x61, 0x6e, 0x2e, 0x56, 0x69, 0x70, 0x4d, 0x65, 0x74, 0x61, 0x1a, 0x0f, 0x2e, 0x6c, 0x62,
	0x2e, 0x6b, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x32, 0x0a, 0x0a,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x52, 0x65, 0x61, 0x6c, 0x12, 0x13, 0x2e, 0x6c, 0x62, 0x2e,
	0x6b, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x1a,
	0x0f, 0x2e, 0x6c, 0x62, 0x2e, 0x6b, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x12, 0x2f, 0x0a, 0x0b, 0x67, 0x65, 0x74, 0x56, 0x69, 0x70, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12,
	0x0e, 0x2e, 0x6c, 0x62, 0x2e, 0x6b, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x2e, 0x56, 0x69, 0x70, 0x1a,
	0x10, 0x2e, 0x6c, 0x62, 0x2e, 0x6b, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x2e, 0x46, 0x6c, 0x61, 0x67,
	0x73, 0x12, 0x31, 0x0a, 0x0c, 0x67, 0x65, 0x74, 0x52, 0x65, 0x61, 0x6c, 0x46, 0x6c, 0x61, 0x67,
	0x73, 0x12, 0x0f, 0x2e, 0x6c, 0x62, 0x2e, 0x6b, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x2e, 0x52, 0x65,
	0x61, 0x6c, 0x1a, 0x10, 0x2e, 0x6c, 0x62, 0x2e, 0x6b, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x2e, 0x46,
	0x6c, 0x61, 0x67, 0x73, 0x12, 0x37, 0x0a, 0x0d, 0x61, 0x64, 0x64, 0x52, 0x65, 0x61, 0x6c, 0x46,
	0x6f, 0x72, 0x56, 0x69, 0x70, 0x12, 0x15, 0x2e, 0x6c, 0x62, 0x2e, 0x6b, 0x61, 0x74, 0x72, 0x61,
	0x6e, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x46, 0x6f, 0x72, 0x56, 0x69, 0x70, 0x1a, 0x0f, 0x2e, 0x6c,
	0x62, 0x2e, 0x6b, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x37, 0x0a,
	0x0d, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x61, 0x6c, 0x46, 0x6f, 0x72, 0x56, 0x69, 0x70, 0x12, 0x15,
	0x2e, 0x6c, 0x62, 0x2e, 0x6b, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x46,
	0x6f, 0x72, 0x56, 0x69, 0x70, 0x1a, 0x0f, 0x2e, 0x6c, 0x62, 0x2e, 0x6b, 0x61, 0x74, 0x72, 0x61,
	0x6e, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x44, 0x0a, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79,
	0x52, 0x65, 0x61, 0x6c, 0x73, 0x46, 0x6f, 0x72, 0x56, 0x69, 0x70, 0x12, 0x1e, 0x2e, 0x6c, 0x62,
	0x2e, 0x6b, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x2e, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x52, 0x65, 0x61, 0x6c, 0x73, 0x46, 0x6f, 0x72, 0x56, 0x69, 0x70, 0x1a, 0x0f, 0x2e, 0x6c, 0x62,
	0x2e, 0x6b, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x32, 0x0a, 0x0e,
	0x67, 0x65, 0x74, 0x52, 0x65, 0x61, 0x6c, 0x73, 0x46, 0x6f, 0x72, 0x56, 0x69, 0x70, 0x12, 0x0e,
	0x2e, 0x6c, 0x62, 0x2e, 0x6b, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x2e, 0x56, 0x69, 0x70, 0x1a, 0x10,
	0x2e, 0x6c, 0x62, 0x2e, 0x6b, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x73,
	0x12, 0x47, 0x0a, 0x16, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x51, 0x75, 0x69, 0x63, 0x52, 0x65,
	0x61, 0x6c, 0x73, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x2e, 0x6c, 0x62, 0x2e,
	0x6b, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x2e, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x51,
	0x75, 0x69, 0x63, 0x52, 0x65, 0x61, 0x6c, 0x73, 0x1a, 0x0f, 0x2e, 0x6c, 0x62, 0x2e, 0x6b, 0x61,
	0x74, 0x72, 0x61, 0x6e, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x3d, 0x0a, 0x13, 0x67, 0x65, 0x74,
	0x51, 0x75, 0x69, 0x63, 0x52, 0x65, 0x61, 0x6c, 0x73, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x12, 0x10, 0x2e, 0x6c, 0x62, 0x2e, 0x6b, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x14, 0x2e, 0x6c, 0x62, 0x2e, 0x6b, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x2e, 0x51,
	0x75, 0x69, 0x63, 0x52, 0x65, 0x61, 0x6c, 0x73, 0x12, 0x32, 0x0a, 0x0e, 0x67, 0x65, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x56, 0x69, 0x70, 0x12, 0x0e, 0x2e, 0x6c, 0x62, 0x2e,
	0x6b, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x2e, 0x56, 0x69, 0x70, 0x1a, 0x10, 0x2e, 0x6c, 0x62, 0x2e,
	0x6b, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x0b,
	0x67, 0x65, 0x74, 0x4c, 0x72, 0x75, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x10, 0x2e, 0x6c, 0x62,
	0x2e, 0x6b, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x10, 0x2e,
	0x6c, 0x62, 0x2e, 0x6b, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12,
	0x35, 0x0a, 0x0f, 0x67, 0x65, 0x74, 0x4c, 0x72, 0x75, 0x4d, 0x69, 0x73, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x10, 0x2e, 0x6c, 0x62, 0x2e, 0x6b, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x10, 0x2e, 0x6c, 0x62, 0x2e, 0x6b, 0x61, 0x74, 0x72, 0x61, 0x6e,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x13, 0x67, 0x65, 0x74, 0x4c, 0x72, 0x75,
	0x46, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x10, 0x2e,
	0x6c, 0x62, 0x2e, 0x6b, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x10, 0x2e, 0x6c, 0x62, 0x2e, 0x6b, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x38, 0x0a, 0x12, 0x67, 0x65, 0x74, 0x49, 0x63, 0x6d, 0x70, 0x54, 0x6f, 0x6f, 0x42,
	0x69, 0x67, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x10, 0x2e, 0x6c, 0x62, 0x2e, 0x6b, 0x61, 0x74,
	0x72, 0x61, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x10, 0x2e, 0x6c, 0x62, 0x2e, 0x6b,
	0x61, 0x74, 0x72, 0x61, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x13, 0x61,
	0x64, 0x64, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x44,
	0x73, 0x74, 0x12, 0x16, 0x2e, 0x6c, 0x62, 0x2e, 0x6b, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x2e, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x1a, 0x0f, 0x2e, 0x6c, 0x62, 0x2e,
	0x6b, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x39, 0x0a, 0x13, 0x64,
	0x65, 0x6c, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x44,
	0x73, 0x74, 0x12, 0x11, 0x2e, 0x6c, 0x62, 0x2e, 0x6b, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x2e, 0x53,
	0x6f, 0x6d, 0x61, 0x72, 0x6b, 0x1a, 0x0f, 0x2e, 0x6c, 0x62, 0x2e, 0x6b, 0x61, 0x74, 0x72, 0x61,
	0x6e, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x3a, 0x0a, 0x14, 0x67, 0x65, 0x74, 0x48, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x44, 0x73, 0x74, 0x12, 0x10,
	0x2e, 0x6c, 0x62, 0x2e, 0x6b, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x10, 0x2e, 0x6c, 0x62, 0x2e, 0x6b, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x2e, 0x68, 0x63, 0x4d,
	0x61, 0x70, 0x42, 0x0b, 0x5a, 0x09, 0x2e, 0x2f, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_katran_proto_rawDescOnce sync.Once
	file_katran_proto_rawDescData = file_katran_proto_rawDesc
)

func file_katran_proto_rawDescGZIP() []byte {
	file_katran_proto_rawDescOnce.Do(func() {
		file_katran_proto_rawDescData = protoimpl.X.CompressGZIP(file_katran_proto_rawDescData)
	})
	return file_katran_proto_rawDescData
}

var file_katran_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_katran_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_katran_proto_goTypes = []interface{}{
	(Action)(0),                 // 0: lb.katran.Action
	(*Empty)(nil),               // 1: lb.katran.Empty
	(*Bool)(nil),                // 2: lb.katran.Bool
	(*Vip)(nil),                 // 3: lb.katran.Vip
	(*VipMeta)(nil),             // 4: lb.katran.VipMeta
	(*RealMeta)(nil),            // 5: lb.katran.RealMeta
	(*Real)(nil),                // 6: lb.katran.Real
	(*QuicReal)(nil),            // 7: lb.katran.QuicReal
	(*Mac)(nil),                 // 8: lb.katran.Mac
	(*Stats)(nil),               // 9: lb.katran.Stats
	(*Healthcheck)(nil),         // 10: lb.katran.Healthcheck
	(*HcMap)(nil),               // 11: lb.katran.hcMap
	(*Reals)(nil),               // 12: lb.katran.Reals
	(*Vips)(nil),                // 13: lb.katran.Vips
	(*QuicReals)(nil),           // 14: lb.katran.QuicReals
	(*ModifiedRealsForVip)(nil), // 15: lb.katran.modifiedRealsForVip
	(*ModifiedQuicReals)(nil),   // 16: lb.katran.modifiedQuicReals
	(*RealForVip)(nil),          // 17: lb.katran.realForVip
	(*Flags)(nil),               // 18: lb.katran.Flags
	(*Somark)(nil),              // 19: lb.katran.Somark
	nil,                         // 20: lb.katran.hcMap.HealthchecksEntry
}
var file_katran_proto_depIdxs = []int32{
	3,  // 0: lb.katran.VipMeta.vip:type_name -> lb.katran.Vip
	20, // 1: lb.katran.hcMap.healthchecks:type_name -> lb.katran.hcMap.HealthchecksEntry
	6,  // 2: lb.katran.Reals.reals:type_name -> lb.katran.Real
	3,  // 3: lb.katran.Vips.vips:type_name -> lb.katran.Vip
	7,  // 4: lb.katran.QuicReals.qreals:type_name -> lb.katran.QuicReal
	0,  // 5: lb.katran.modifiedRealsForVip.action:type_name -> lb.katran.Action
	12, // 6: lb.katran.modifiedRealsForVip.real:type_name -> lb.katran.Reals
	3,  // 7: lb.katran.modifiedRealsForVip.vip:type_name -> lb.katran.Vip
	0,  // 8: lb.katran.modifiedQuicReals.action:type_name -> lb.katran.Action
	14, // 9: lb.katran.modifiedQuicReals.reals:type_name -> lb.katran.QuicReals
	6,  // 10: lb.katran.realForVip.real:type_name -> lb.katran.Real
	3,  // 11: lb.katran.realForVip.vip:type_name -> lb.katran.Vip
	8,  // 12: lb.katran.KatranService.changeMac:input_type -> lb.katran.Mac
	1,  // 13: lb.katran.KatranService.getMac:input_type -> lb.katran.Empty
	4,  // 14: lb.katran.KatranService.addVip:input_type -> lb.katran.VipMeta
	3,  // 15: lb.katran.KatranService.delVip:input_type -> lb.katran.Vip
	1,  // 16: lb.katran.KatranService.getAllVips:input_type -> lb.katran.Empty
	4,  // 17: lb.katran.KatranService.modifyVip:input_type -> lb.katran.VipMeta
	5,  // 18: lb.katran.KatranService.modifyReal:input_type -> lb.katran.RealMeta
	3,  // 19: lb.katran.KatranService.getVipFlags:input_type -> lb.katran.Vip
	6,  // 20: lb.katran.KatranService.getRealFlags:input_type -> lb.katran.Real
	17, // 21: lb.katran.KatranService.addRealForVip:input_type -> lb.katran.realForVip
	17, // 22: lb.katran.KatranService.delRealForVip:input_type -> lb.katran.realForVip
	15, // 23: lb.katran.KatranService.modifyRealsForVip:input_type -> lb.katran.modifiedRealsForVip
	3,  // 24: lb.katran.KatranService.getRealsForVip:input_type -> lb.katran.Vip
	16, // 25: lb.katran.KatranService.modifyQuicRealsMapping:input_type -> lb.katran.modifiedQuicReals
	1,  // 26: lb.katran.KatranService.getQuicRealsMapping:input_type -> lb.katran.Empty
	3,  // 27: lb.katran.KatranService.getStatsForVip:input_type -> lb.katran.Vip
	1,  // 28: lb.katran.KatranService.getLruStats:input_type -> lb.katran.Empty
	1,  // 29: lb.katran.KatranService.getLruMissStats:input_type -> lb.katran.Empty
	1,  // 30: lb.katran.KatranService.getLruFallbackStats:input_type -> lb.katran.Empty
	1,  // 31: lb.katran.KatranService.getIcmpTooBigStats:input_type -> lb.katran.Empty
	10, // 32: lb.katran.KatranService.addHealthcheckerDst:input_type -> lb.katran.Healthcheck
	19, // 33: lb.katran.KatranService.delHealthcheckerDst:input_type -> lb.katran.Somark
	1,  // 34: lb.katran.KatranService.getHealthcheckersDst:input_type -> lb.katran.Empty
	2,  // 35: lb.katran.KatranService.changeMac:output_type -> lb.katran.Bool
	8,  // 36: lb.katran.KatranService.getMac:output_type -> lb.katran.Mac
	2,  // 37: lb.katran.KatranService.addVip:output_type -> lb.katran.Bool
	2,  // 38: lb.katran.KatranService.delVip:output_type -> lb.katran.Bool
	13, // 39: lb.katran.KatranService.getAllVips:output_type -> lb.katran.Vips
	2,  // 40: lb.katran.KatranService.modifyVip:output_type -> lb.katran.Bool
	2,  // 41: lb.katran.KatranService.modifyReal:output_type -> lb.katran.Bool
	18, // 42: lb.katran.KatranService.getVipFlags:output_type -> lb.katran.Flags
	18, // 43: lb.katran.KatranService.getRealFlags:output_type -> lb.katran.Flags
	2,  // 44: lb.katran.KatranService.addRealForVip:output_type -> lb.katran.Bool
	2,  // 45: lb.katran.KatranService.delRealForVip:output_type -> lb.katran.Bool
	2,  // 46: lb.katran.KatranService.modifyRealsForVip:output_type -> lb.katran.Bool
	12, // 47: lb.katran.KatranService.getRealsForVip:output_type -> lb.katran.Reals
	2,  // 48: lb.katran.KatranService.modifyQuicRealsMapping:output_type -> lb.katran.Bool
	14, // 49: lb.katran.KatranService.getQuicRealsMapping:output_type -> lb.katran.QuicReals
	9,  // 50: lb.katran.KatranService.getStatsForVip:output_type -> lb.katran.Stats
	9,  // 51: lb.katran.KatranService.getLruStats:output_type -> lb.katran.Stats
	9,  // 52: lb.katran.KatranService.getLruMissStats:output_type -> lb.katran.Stats
	9,  // 53: lb.katran.KatranService.getLruFallbackStats:output_type -> lb.katran.Stats
	9,  // 54: lb.katran.KatranService.getIcmpTooBigStats:output_type -> lb.katran.Stats
	2,  // 55: lb.katran.KatranService.addHealthcheckerDst:output_type -> lb.katran.Bool
	2,  // 56: lb.katran.KatranService.delHealthcheckerDst:output_type -> lb.katran.Bool
	11, // 57: lb.katran.KatranService.getHealthcheckersDst:output_type -> lb.katran.hcMap
	35, // [35:58] is the sub-list for method output_type
	12, // [12:35] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_katran_proto_init() }
func file_katran_proto_init() {
	if File_katran_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_katran_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_katran_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_katran_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vip); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_katran_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_katran_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RealMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_katran_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Real); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_katran_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuicReal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_katran_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Mac); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_katran_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_katran_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Healthcheck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_katran_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HcMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_katran_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Reals); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_katran_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vips); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_katran_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuicReals); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_katran_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifiedRealsForVip); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_katran_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifiedQuicReals); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_katran_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RealForVip); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_katran_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Flags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_katran_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Somark); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_katran_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_katran_proto_goTypes,
		DependencyIndexes: file_katran_proto_depIdxs,
		EnumInfos:         file_katran_proto_enumTypes,
		MessageInfos:      file_katran_proto_msgTypes,
	}.Build()
	File_katran_proto = out.File
	file_katran_proto_rawDesc = nil
	file_katran_proto_goTypes = nil
	file_katran_proto_depIdxs = nil
}
