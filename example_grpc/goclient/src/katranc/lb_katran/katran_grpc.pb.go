// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: katran.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KatranServiceClient is the client API for KatranService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KatranServiceClient interface {
	ChangeMac(ctx context.Context, in *Mac, opts ...grpc.CallOption) (*Bool, error)
	GetMac(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Mac, error)
	AddVip(ctx context.Context, in *VipMeta, opts ...grpc.CallOption) (*Bool, error)
	DelVip(ctx context.Context, in *Vip, opts ...grpc.CallOption) (*Bool, error)
	GetAllVips(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Vips, error)
	ModifyVip(ctx context.Context, in *VipMeta, opts ...grpc.CallOption) (*Bool, error)
	ModifyReal(ctx context.Context, in *RealMeta, opts ...grpc.CallOption) (*Bool, error)
	GetVipFlags(ctx context.Context, in *Vip, opts ...grpc.CallOption) (*Flags, error)
	GetRealFlags(ctx context.Context, in *Real, opts ...grpc.CallOption) (*Flags, error)
	AddRealForVip(ctx context.Context, in *RealForVip, opts ...grpc.CallOption) (*Bool, error)
	DelRealForVip(ctx context.Context, in *RealForVip, opts ...grpc.CallOption) (*Bool, error)
	ModifyRealsForVip(ctx context.Context, in *ModifiedRealsForVip, opts ...grpc.CallOption) (*Bool, error)
	GetRealsForVip(ctx context.Context, in *Vip, opts ...grpc.CallOption) (*Reals, error)
	ModifyQuicRealsMapping(ctx context.Context, in *ModifiedQuicReals, opts ...grpc.CallOption) (*Bool, error)
	GetQuicRealsMapping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*QuicReals, error)
	GetStatsForVip(ctx context.Context, in *Vip, opts ...grpc.CallOption) (*Stats, error)
	GetLruStats(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Stats, error)
	GetLruMissStats(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Stats, error)
	GetLruFallbackStats(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Stats, error)
	GetIcmpTooBigStats(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Stats, error)
	AddHealthcheckerDst(ctx context.Context, in *Healthcheck, opts ...grpc.CallOption) (*Bool, error)
	DelHealthcheckerDst(ctx context.Context, in *Somark, opts ...grpc.CallOption) (*Bool, error)
	GetHealthcheckersDst(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HcMap, error)
}

type katranServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKatranServiceClient(cc grpc.ClientConnInterface) KatranServiceClient {
	return &katranServiceClient{cc}
}

func (c *katranServiceClient) ChangeMac(ctx context.Context, in *Mac, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/lb.katran.KatranService/changeMac", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *katranServiceClient) GetMac(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Mac, error) {
	out := new(Mac)
	err := c.cc.Invoke(ctx, "/lb.katran.KatranService/getMac", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *katranServiceClient) AddVip(ctx context.Context, in *VipMeta, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/lb.katran.KatranService/addVip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *katranServiceClient) DelVip(ctx context.Context, in *Vip, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/lb.katran.KatranService/delVip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *katranServiceClient) GetAllVips(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Vips, error) {
	out := new(Vips)
	err := c.cc.Invoke(ctx, "/lb.katran.KatranService/getAllVips", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *katranServiceClient) ModifyVip(ctx context.Context, in *VipMeta, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/lb.katran.KatranService/modifyVip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *katranServiceClient) ModifyReal(ctx context.Context, in *RealMeta, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/lb.katran.KatranService/modifyReal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *katranServiceClient) GetVipFlags(ctx context.Context, in *Vip, opts ...grpc.CallOption) (*Flags, error) {
	out := new(Flags)
	err := c.cc.Invoke(ctx, "/lb.katran.KatranService/getVipFlags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *katranServiceClient) GetRealFlags(ctx context.Context, in *Real, opts ...grpc.CallOption) (*Flags, error) {
	out := new(Flags)
	err := c.cc.Invoke(ctx, "/lb.katran.KatranService/getRealFlags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *katranServiceClient) AddRealForVip(ctx context.Context, in *RealForVip, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/lb.katran.KatranService/addRealForVip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *katranServiceClient) DelRealForVip(ctx context.Context, in *RealForVip, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/lb.katran.KatranService/delRealForVip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *katranServiceClient) ModifyRealsForVip(ctx context.Context, in *ModifiedRealsForVip, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/lb.katran.KatranService/modifyRealsForVip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *katranServiceClient) GetRealsForVip(ctx context.Context, in *Vip, opts ...grpc.CallOption) (*Reals, error) {
	out := new(Reals)
	err := c.cc.Invoke(ctx, "/lb.katran.KatranService/getRealsForVip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *katranServiceClient) ModifyQuicRealsMapping(ctx context.Context, in *ModifiedQuicReals, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/lb.katran.KatranService/modifyQuicRealsMapping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *katranServiceClient) GetQuicRealsMapping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*QuicReals, error) {
	out := new(QuicReals)
	err := c.cc.Invoke(ctx, "/lb.katran.KatranService/getQuicRealsMapping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *katranServiceClient) GetStatsForVip(ctx context.Context, in *Vip, opts ...grpc.CallOption) (*Stats, error) {
	out := new(Stats)
	err := c.cc.Invoke(ctx, "/lb.katran.KatranService/getStatsForVip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *katranServiceClient) GetLruStats(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Stats, error) {
	out := new(Stats)
	err := c.cc.Invoke(ctx, "/lb.katran.KatranService/getLruStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *katranServiceClient) GetLruMissStats(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Stats, error) {
	out := new(Stats)
	err := c.cc.Invoke(ctx, "/lb.katran.KatranService/getLruMissStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *katranServiceClient) GetLruFallbackStats(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Stats, error) {
	out := new(Stats)
	err := c.cc.Invoke(ctx, "/lb.katran.KatranService/getLruFallbackStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *katranServiceClient) GetIcmpTooBigStats(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Stats, error) {
	out := new(Stats)
	err := c.cc.Invoke(ctx, "/lb.katran.KatranService/getIcmpTooBigStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *katranServiceClient) AddHealthcheckerDst(ctx context.Context, in *Healthcheck, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/lb.katran.KatranService/addHealthcheckerDst", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *katranServiceClient) DelHealthcheckerDst(ctx context.Context, in *Somark, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/lb.katran.KatranService/delHealthcheckerDst", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *katranServiceClient) GetHealthcheckersDst(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HcMap, error) {
	out := new(HcMap)
	err := c.cc.Invoke(ctx, "/lb.katran.KatranService/getHealthcheckersDst", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KatranServiceServer is the server API for KatranService service.
// All implementations must embed UnimplementedKatranServiceServer
// for forward compatibility
type KatranServiceServer interface {
	ChangeMac(context.Context, *Mac) (*Bool, error)
	GetMac(context.Context, *Empty) (*Mac, error)
	AddVip(context.Context, *VipMeta) (*Bool, error)
	DelVip(context.Context, *Vip) (*Bool, error)
	GetAllVips(context.Context, *Empty) (*Vips, error)
	ModifyVip(context.Context, *VipMeta) (*Bool, error)
	ModifyReal(context.Context, *RealMeta) (*Bool, error)
	GetVipFlags(context.Context, *Vip) (*Flags, error)
	GetRealFlags(context.Context, *Real) (*Flags, error)
	AddRealForVip(context.Context, *RealForVip) (*Bool, error)
	DelRealForVip(context.Context, *RealForVip) (*Bool, error)
	ModifyRealsForVip(context.Context, *ModifiedRealsForVip) (*Bool, error)
	GetRealsForVip(context.Context, *Vip) (*Reals, error)
	ModifyQuicRealsMapping(context.Context, *ModifiedQuicReals) (*Bool, error)
	GetQuicRealsMapping(context.Context, *Empty) (*QuicReals, error)
	GetStatsForVip(context.Context, *Vip) (*Stats, error)
	GetLruStats(context.Context, *Empty) (*Stats, error)
	GetLruMissStats(context.Context, *Empty) (*Stats, error)
	GetLruFallbackStats(context.Context, *Empty) (*Stats, error)
	GetIcmpTooBigStats(context.Context, *Empty) (*Stats, error)
	AddHealthcheckerDst(context.Context, *Healthcheck) (*Bool, error)
	DelHealthcheckerDst(context.Context, *Somark) (*Bool, error)
	GetHealthcheckersDst(context.Context, *Empty) (*HcMap, error)
	mustEmbedUnimplementedKatranServiceServer()
}

// UnimplementedKatranServiceServer must be embedded to have forward compatible implementations.
type UnimplementedKatranServiceServer struct {
}

func (UnimplementedKatranServiceServer) ChangeMac(context.Context, *Mac) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeMac not implemented")
}
func (UnimplementedKatranServiceServer) GetMac(context.Context, *Empty) (*Mac, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMac not implemented")
}
func (UnimplementedKatranServiceServer) AddVip(context.Context, *VipMeta) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddVip not implemented")
}
func (UnimplementedKatranServiceServer) DelVip(context.Context, *Vip) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelVip not implemented")
}
func (UnimplementedKatranServiceServer) GetAllVips(context.Context, *Empty) (*Vips, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllVips not implemented")
}
func (UnimplementedKatranServiceServer) ModifyVip(context.Context, *VipMeta) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyVip not implemented")
}
func (UnimplementedKatranServiceServer) ModifyReal(context.Context, *RealMeta) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyReal not implemented")
}
func (UnimplementedKatranServiceServer) GetVipFlags(context.Context, *Vip) (*Flags, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVipFlags not implemented")
}
func (UnimplementedKatranServiceServer) GetRealFlags(context.Context, *Real) (*Flags, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRealFlags not implemented")
}
func (UnimplementedKatranServiceServer) AddRealForVip(context.Context, *RealForVip) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRealForVip not implemented")
}
func (UnimplementedKatranServiceServer) DelRealForVip(context.Context, *RealForVip) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelRealForVip not implemented")
}
func (UnimplementedKatranServiceServer) ModifyRealsForVip(context.Context, *ModifiedRealsForVip) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyRealsForVip not implemented")
}
func (UnimplementedKatranServiceServer) GetRealsForVip(context.Context, *Vip) (*Reals, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRealsForVip not implemented")
}
func (UnimplementedKatranServiceServer) ModifyQuicRealsMapping(context.Context, *ModifiedQuicReals) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyQuicRealsMapping not implemented")
}
func (UnimplementedKatranServiceServer) GetQuicRealsMapping(context.Context, *Empty) (*QuicReals, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuicRealsMapping not implemented")
}
func (UnimplementedKatranServiceServer) GetStatsForVip(context.Context, *Vip) (*Stats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatsForVip not implemented")
}
func (UnimplementedKatranServiceServer) GetLruStats(context.Context, *Empty) (*Stats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLruStats not implemented")
}
func (UnimplementedKatranServiceServer) GetLruMissStats(context.Context, *Empty) (*Stats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLruMissStats not implemented")
}
func (UnimplementedKatranServiceServer) GetLruFallbackStats(context.Context, *Empty) (*Stats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLruFallbackStats not implemented")
}
func (UnimplementedKatranServiceServer) GetIcmpTooBigStats(context.Context, *Empty) (*Stats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIcmpTooBigStats not implemented")
}
func (UnimplementedKatranServiceServer) AddHealthcheckerDst(context.Context, *Healthcheck) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddHealthcheckerDst not implemented")
}
func (UnimplementedKatranServiceServer) DelHealthcheckerDst(context.Context, *Somark) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelHealthcheckerDst not implemented")
}
func (UnimplementedKatranServiceServer) GetHealthcheckersDst(context.Context, *Empty) (*HcMap, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHealthcheckersDst not implemented")
}
func (UnimplementedKatranServiceServer) mustEmbedUnimplementedKatranServiceServer() {}

// UnsafeKatranServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KatranServiceServer will
// result in compilation errors.
type UnsafeKatranServiceServer interface {
	mustEmbedUnimplementedKatranServiceServer()
}

func RegisterKatranServiceServer(s grpc.ServiceRegistrar, srv KatranServiceServer) {
	s.RegisterService(&KatranService_ServiceDesc, srv)
}

func _KatranService_ChangeMac_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Mac)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KatranServiceServer).ChangeMac(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lb.katran.KatranService/changeMac",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KatranServiceServer).ChangeMac(ctx, req.(*Mac))
	}
	return interceptor(ctx, in, info, handler)
}

func _KatranService_GetMac_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KatranServiceServer).GetMac(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lb.katran.KatranService/getMac",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KatranServiceServer).GetMac(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _KatranService_AddVip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VipMeta)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KatranServiceServer).AddVip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lb.katran.KatranService/addVip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KatranServiceServer).AddVip(ctx, req.(*VipMeta))
	}
	return interceptor(ctx, in, info, handler)
}

func _KatranService_DelVip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Vip)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KatranServiceServer).DelVip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lb.katran.KatranService/delVip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KatranServiceServer).DelVip(ctx, req.(*Vip))
	}
	return interceptor(ctx, in, info, handler)
}

func _KatranService_GetAllVips_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KatranServiceServer).GetAllVips(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lb.katran.KatranService/getAllVips",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KatranServiceServer).GetAllVips(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _KatranService_ModifyVip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VipMeta)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KatranServiceServer).ModifyVip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lb.katran.KatranService/modifyVip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KatranServiceServer).ModifyVip(ctx, req.(*VipMeta))
	}
	return interceptor(ctx, in, info, handler)
}

func _KatranService_ModifyReal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RealMeta)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KatranServiceServer).ModifyReal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lb.katran.KatranService/modifyReal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KatranServiceServer).ModifyReal(ctx, req.(*RealMeta))
	}
	return interceptor(ctx, in, info, handler)
}

func _KatranService_GetVipFlags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Vip)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KatranServiceServer).GetVipFlags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lb.katran.KatranService/getVipFlags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KatranServiceServer).GetVipFlags(ctx, req.(*Vip))
	}
	return interceptor(ctx, in, info, handler)
}

func _KatranService_GetRealFlags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Real)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KatranServiceServer).GetRealFlags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lb.katran.KatranService/getRealFlags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KatranServiceServer).GetRealFlags(ctx, req.(*Real))
	}
	return interceptor(ctx, in, info, handler)
}

func _KatranService_AddRealForVip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RealForVip)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KatranServiceServer).AddRealForVip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lb.katran.KatranService/addRealForVip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KatranServiceServer).AddRealForVip(ctx, req.(*RealForVip))
	}
	return interceptor(ctx, in, info, handler)
}

func _KatranService_DelRealForVip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RealForVip)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KatranServiceServer).DelRealForVip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lb.katran.KatranService/delRealForVip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KatranServiceServer).DelRealForVip(ctx, req.(*RealForVip))
	}
	return interceptor(ctx, in, info, handler)
}

func _KatranService_ModifyRealsForVip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifiedRealsForVip)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KatranServiceServer).ModifyRealsForVip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lb.katran.KatranService/modifyRealsForVip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KatranServiceServer).ModifyRealsForVip(ctx, req.(*ModifiedRealsForVip))
	}
	return interceptor(ctx, in, info, handler)
}

func _KatranService_GetRealsForVip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Vip)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KatranServiceServer).GetRealsForVip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lb.katran.KatranService/getRealsForVip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KatranServiceServer).GetRealsForVip(ctx, req.(*Vip))
	}
	return interceptor(ctx, in, info, handler)
}

func _KatranService_ModifyQuicRealsMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifiedQuicReals)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KatranServiceServer).ModifyQuicRealsMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lb.katran.KatranService/modifyQuicRealsMapping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KatranServiceServer).ModifyQuicRealsMapping(ctx, req.(*ModifiedQuicReals))
	}
	return interceptor(ctx, in, info, handler)
}

func _KatranService_GetQuicRealsMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KatranServiceServer).GetQuicRealsMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lb.katran.KatranService/getQuicRealsMapping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KatranServiceServer).GetQuicRealsMapping(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _KatranService_GetStatsForVip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Vip)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KatranServiceServer).GetStatsForVip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lb.katran.KatranService/getStatsForVip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KatranServiceServer).GetStatsForVip(ctx, req.(*Vip))
	}
	return interceptor(ctx, in, info, handler)
}

func _KatranService_GetLruStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KatranServiceServer).GetLruStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lb.katran.KatranService/getLruStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KatranServiceServer).GetLruStats(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _KatranService_GetLruMissStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KatranServiceServer).GetLruMissStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lb.katran.KatranService/getLruMissStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KatranServiceServer).GetLruMissStats(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _KatranService_GetLruFallbackStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KatranServiceServer).GetLruFallbackStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lb.katran.KatranService/getLruFallbackStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KatranServiceServer).GetLruFallbackStats(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _KatranService_GetIcmpTooBigStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KatranServiceServer).GetIcmpTooBigStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lb.katran.KatranService/getIcmpTooBigStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KatranServiceServer).GetIcmpTooBigStats(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _KatranService_AddHealthcheckerDst_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Healthcheck)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KatranServiceServer).AddHealthcheckerDst(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lb.katran.KatranService/addHealthcheckerDst",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KatranServiceServer).AddHealthcheckerDst(ctx, req.(*Healthcheck))
	}
	return interceptor(ctx, in, info, handler)
}

func _KatranService_DelHealthcheckerDst_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Somark)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KatranServiceServer).DelHealthcheckerDst(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lb.katran.KatranService/delHealthcheckerDst",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KatranServiceServer).DelHealthcheckerDst(ctx, req.(*Somark))
	}
	return interceptor(ctx, in, info, handler)
}

func _KatranService_GetHealthcheckersDst_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KatranServiceServer).GetHealthcheckersDst(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lb.katran.KatranService/getHealthcheckersDst",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KatranServiceServer).GetHealthcheckersDst(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// KatranService_ServiceDesc is the grpc.ServiceDesc for KatranService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KatranService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lb.katran.KatranService",
	HandlerType: (*KatranServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "changeMac",
			Handler:    _KatranService_ChangeMac_Handler,
		},
		{
			MethodName: "getMac",
			Handler:    _KatranService_GetMac_Handler,
		},
		{
			MethodName: "addVip",
			Handler:    _KatranService_AddVip_Handler,
		},
		{
			MethodName: "delVip",
			Handler:    _KatranService_DelVip_Handler,
		},
		{
			MethodName: "getAllVips",
			Handler:    _KatranService_GetAllVips_Handler,
		},
		{
			MethodName: "modifyVip",
			Handler:    _KatranService_ModifyVip_Handler,
		},
		{
			MethodName: "modifyReal",
			Handler:    _KatranService_ModifyReal_Handler,
		},
		{
			MethodName: "getVipFlags",
			Handler:    _KatranService_GetVipFlags_Handler,
		},
		{
			MethodName: "getRealFlags",
			Handler:    _KatranService_GetRealFlags_Handler,
		},
		{
			MethodName: "addRealForVip",
			Handler:    _KatranService_AddRealForVip_Handler,
		},
		{
			MethodName: "delRealForVip",
			Handler:    _KatranService_DelRealForVip_Handler,
		},
		{
			MethodName: "modifyRealsForVip",
			Handler:    _KatranService_ModifyRealsForVip_Handler,
		},
		{
			MethodName: "getRealsForVip",
			Handler:    _KatranService_GetRealsForVip_Handler,
		},
		{
			MethodName: "modifyQuicRealsMapping",
			Handler:    _KatranService_ModifyQuicRealsMapping_Handler,
		},
		{
			MethodName: "getQuicRealsMapping",
			Handler:    _KatranService_GetQuicRealsMapping_Handler,
		},
		{
			MethodName: "getStatsForVip",
			Handler:    _KatranService_GetStatsForVip_Handler,
		},
		{
			MethodName: "getLruStats",
			Handler:    _KatranService_GetLruStats_Handler,
		},
		{
			MethodName: "getLruMissStats",
			Handler:    _KatranService_GetLruMissStats_Handler,
		},
		{
			MethodName: "getLruFallbackStats",
			Handler:    _KatranService_GetLruFallbackStats_Handler,
		},
		{
			MethodName: "getIcmpTooBigStats",
			Handler:    _KatranService_GetIcmpTooBigStats_Handler,
		},
		{
			MethodName: "addHealthcheckerDst",
			Handler:    _KatranService_AddHealthcheckerDst_Handler,
		},
		{
			MethodName: "delHealthcheckerDst",
			Handler:    _KatranService_DelHealthcheckerDst_Handler,
		},
		{
			MethodName: "getHealthcheckersDst",
			Handler:    _KatranService_GetHealthcheckersDst_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "katran.proto",
}
